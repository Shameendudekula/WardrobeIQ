function authFetch(url, options = {}) {
  const token = localStorage.getItem('token');
  if (!token) {
    window.location.href = 'login.html';
    return Promise.reject('No token');
  }
  options.headers = {
    ...options.headers,
    'Authorization': `Bearer ${token}`
  };
  options.credentials = 'include';  // if backend requires cookies/session
  return fetch(url, options).then(res => {
    if (res.status === 401) {
      localStorage.removeItem('token');
      window.location.href = 'login.html';
      return Promise.reject('Unauthorized');
    }
    return res;
  });
}


document.addEventListener("DOMContentLoaded", () => {
  const weatherInfo = document.getElementById("weatherInfo");
  const weatherDetails = document.getElementById("weatherDetails");
  const wardrobeItemsDiv = document.getElementById("wardrobeItems");
  const suggestionsDiv = document.getElementById("suggestions");
  const addItemForm = document.getElementById("addItemForm");
  const voiceCommandBtn = document.getElementById("voiceCommandBtn");
  const voiceStatus = document.getElementById("voiceStatus");
  const languageSwitcher = document.getElementById("languageSwitcher");
  const logoutBtn = document.getElementById("logoutBtn");

  logoutBtn.addEventListener('click', async () => {
  try {
    await authFetch('/api/auth/logout', { method: 'POST' });
  } catch(err) {
    console.warn('Logout failed:', err);
  }
  localStorage.removeItem('token');  // clear token on logout
  location.href = '/login.html';
});



  // Long language list (popular + many)
  const LANGS = [
  ['en', 'English'],
  ['es', 'Espa├▒ol'],
  ['fr', 'Fran├зais'],
  ['de', 'Deutsch'],
  ['hi', 'рд╣рд┐рдиреНрджреА'],
  ['zh', 'ф╕нцЦЗ'],
  ['ar', '╪з┘Д╪╣╪▒╪и┘К╪й'],
  ['ru', '╨а╤Г╤Б╤Б╨║╨╕╨╣'],
  ['pt', 'Portugu├кs'],
  ['bn', 'ржмрж╛ржВрж▓рж╛'],
  ['ja', 'цЧецЬмшкЮ'],
  ['ko', 'эХЬъ╡ньЦ┤'],
  ['it', 'Italiano'],
  ['tr', 'T├╝rk├зe'],
  ['vi', 'Tiс║┐ng Viс╗Зt'],
  ['nl', 'Nederlands'],
  ['pl', 'Polski'],
  ['sv', 'Svenska'],
  ['no', 'Norsk'],
  ['da', 'Dansk'],
  ['fi', 'Suomi'],
  ['he', '╫в╫С╫и╫Щ╫к'],
  ['cs', '─Мesky'],
  ['ro', 'Rom├вn─Г'],
  ['hu', 'Magyar'],
  ['el', '╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м'],
  ['uk', '╨г╨║╤А╨░╤Ч╨╜╤Б╤М╨║╨░'],
  ['th', 'р╣Др╕Чр╕в'],
  ['te', 'р░др▒Жр░▓р▒Бр░Чр▒Б'],        // Telugu
  ['kn', 'р▓Хр▓ир│Нр▓ир▓б'],         // Kannada
  ['ta', 'родрооро┐ро┤рпН'],          // Tamil
  ['ml', 'р┤ор┤▓р┤пр┤╛р┤│р┤В']          // Malayalam
];

  LANGS.forEach(([code,label])=>{
    const o = document.createElement('option'); o.value = code; o.textContent = label;
    languageSwitcher.appendChild(o);
  });

  // Simple ui text mapping (expand as needed)
  const UI = {
  en: {
    brandName: "WardrobeIQ",
    logoutBtn: "Logout",
    weatherLoading: "Loading weather...",
    wardrobeTitle: "Your Wardrobe",
    loadingWardrobe: "Loading wardrobe...",
    addTitle: "Add New Item",
    itemNamePlaceholder: "Item name",
    categoryPlaceholder: "Category (e.g., jacket, dress)",
    addItemBtn: "Add Item",
    clearBtn: "Clear",
    suggestionsTitle: "AI Outfit Suggestions",
    loadingSuggestions: "Loading suggestions...",
    historyTitle: "Outfit History",
    voiceBtn: "ЁЯОд Voice"
  },

  es: {
    brandName: "WardrobeIQ",
    logoutBtn: "Cerrar sesi├│n",
    weatherLoading: "Cargando clima...",
    wardrobeTitle: "Tu guardarropa",
    loadingWardrobe: "Cargando guardarropa...",
    addTitle: "Agregar prenda",
    itemNamePlaceholder: "Nombre de la prenda",
    categoryPlaceholder: "Categor├нa (por ejemplo, chaqueta, vestido)",
    addItemBtn: "Agregar prenda",
    clearBtn: "Limpiar",
    suggestionsTitle: "Sugerencias de atuendo",
    loadingSuggestions: "Cargando sugerencias...",
    historyTitle: "Historial de atuendos",
    voiceBtn: "ЁЯОд Voz"
  },

  fr: {
    brandName: "WardrobeIQ",
    logoutBtn: "Se d├йconnecter",
    weatherLoading: "Chargement m├йt├йo...",
    wardrobeTitle: "Votre garde-robe",
    loadingWardrobe: "Chargement du garde-robe...",
    addTitle: "Ajouter un article",
    itemNamePlaceholder: "Nom de l'article",
    categoryPlaceholder: "Cat├йgorie (ex : veste, robe)",
    addItemBtn: "Ajouter l'article",
    clearBtn: "Effacer",
    suggestionsTitle: "Suggestions de tenues IA",
    loadingSuggestions: "Chargement des suggestions...",
    historyTitle: "Historique des tenues",
    voiceBtn: "ЁЯОд Voix"
  },

  de: {
    brandName: "WardrobeIQ",
    logoutBtn: "Abmelden",
    weatherLoading: "Wetter wird geladen...",
    wardrobeTitle: "Dein Kleiderschrank",
    loadingWardrobe: "Kleiderschrank wird geladen...",
    addTitle: "Neues Teil hinzuf├╝gen",
    itemNamePlaceholder: "Name des Teils",
    categoryPlaceholder: "Kategorie (z.B. Jacke, Kleid)",
    addItemBtn: "Teil hinzuf├╝gen",
    clearBtn: "L├╢schen",
    suggestionsTitle: "KI Outfit Vorschl├дge",
    loadingSuggestions: "Vorschl├дge werden geladen...",
    voiceBtn: "ЁЯОд Stimme"
  },

  hi: {
    brandName: "WardrobeIQ",
    logoutBtn: "рд▓реЙрдЧ рдЖрдЙрдЯ",
    weatherLoading: "рдореМрд╕рдо рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    wardrobeTitle: "рдЖрдкрдХреА рдЕрд▓рдорд╛рд░реА",
    loadingWardrobe: "рдЕрд▓рдорд╛рд░реА рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...",
    addTitle: "рдирдпрд╛ рдЖрдЗрдЯрдо рдЬреЛрдбрд╝реЗрдВ",
    itemNamePlaceholder: "рдЖрдЗрдЯрдо рдХрд╛ рдирд╛рдо",
    categoryPlaceholder: "рд╢реНрд░реЗрдгреА (рдЬреИрд╕реЗ, рдЬреИрдХреЗрдЯ, рдбреНрд░реЗрд╕)",
    addItemBtn: "рдЖрдЗрдЯрдо рдЬреЛрдбрд╝реЗрдВ",
    clearBtn: "рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
    suggestionsTitle: "рдПрдЖрдИ рдЖрдЙрдЯрдлрд┐рдЯ рд╕реБрдЭрд╛рд╡",
    loadingSuggestions: "рд╕реБрдЭрд╛рд╡ рд▓реЛрдб рд╣реЛ рд░рд╣реЗ рд╣реИрдВ...",
    voiceBtn: "ЁЯОд рдЖрд╡рд╛рдЬрд╝"
  },

  te: {
    brandName: "WardrobeIQ",
    logoutBtn: "р░▓р░╛р░Чр▒Н р░Ер░╡р▒Бр░Яр▒Н",
    weatherLoading: "р░╡р░╛р░др░╛р░╡р░░р░гр░В р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Бр░Вр░жр░┐...",
    wardrobeTitle: "р░ор▒А р░Ер░▓р▒Нр░ор░╛р░░р▒А",
    loadingWardrobe: "р░Ер░▓р▒Нр░ор░╛р░░р▒А р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
    addTitle: "р░Хр▒Кр░др▒Нр░д р░╡р░╕р▒Нр░др▒Бр░╡р▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐",
    itemNamePlaceholder: "р░╡р░╕р▒Нр░др▒Бр░╡р▒Б р░кр▒Зр░░р▒Б",
    categoryPlaceholder: "р░╡р░░р▒Нр░Чр░В (р░Йр░жр░╛: р░Ьр░╛р░Хр▒Жр░Яр▒Н, р░бр▒Нр░░р▒Жр░╕р▒Н)",
    addItemBtn: "р░╡р░╕р▒Нр░др▒Бр░╡р▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐",
    clearBtn: "р░╕р░╛р░лр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    suggestionsTitle: "р░Пр░Р р░жр▒Бр░╕р▒Нр░др▒Бр░▓р▒Б р░╕р▒Вр░Ър░ир░▓р▒Б",
    loadingSuggestions: "р░╕р▒Вр░Ър░ир░▓р▒Б р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Бр░ир▒Нр░ир░╛р░пр░┐...",
    voiceBtn: "ЁЯОд р░╡р░╛р░пр░┐р░╕р▒Н"
  },

  kn: {
    brandName: "WardrobeIQ",
    logoutBtn: "р▓▓р▓╛р▓Чр│Н р▓Фр▓Яр│Н",
    weatherLoading: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    wardrobeTitle: "р▓ир▓┐р▓ор│Нр▓о р▓Ер▓▓р│Нр▓ор▓╛р▓░р▓┐",
    loadingWardrobe: "р▓Ер▓▓р│Нр▓ор▓╛р▓░р▓┐ р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    addTitle: "р▓╣р│Кр▓╕ р▓╡р▓╕р│Нр▓др│Б р▓╕р│Зр▓░р▓┐р▓╕р▓┐",
    itemNamePlaceholder: "р▓╡р▓╕р│Нр▓др│Б р▓╣р│Жр▓╕р▓░р│Б",
    categoryPlaceholder: "р▓╡р▓░р│Нр▓Ч (р▓Йр▓жр▓╛: р▓Ьр▓╛р▓Хр│Жр▓Яр│Н, р▓Йр▓бр│Бр▓кр│Б)",
    addItemBtn: "р▓╡р▓╕р│Нр▓др│Б р▓╕р│Зр▓░р▓┐р▓╕р▓┐",
    clearBtn: "р▓╕р▓╛р▓лр│Б р▓ор▓╛р▓бр▓┐",
    suggestionsTitle: "р▓Пр▓Р р▓Ер▓Яр│Нр▓Яire р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б",
    loadingSuggestions: "р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
    voiceBtn: "ЁЯОд р▓зр│Нр▓╡р▓ир▓┐"
  },

  ta: {
    brandName: "WardrobeIQ",
    logoutBtn: "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
    weatherLoading: "ро╡ро╛ройро┐ро▓рпИ роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    wardrobeTitle: "роЙроЩрпНроХро│рпН роЕро▓рооро╛ро░ро┐",
    loadingWardrobe: "роЕро▓рооро╛ро░ро┐ роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    addTitle: "рокрпБродро┐роп рокрпКро░рпБро│рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
    itemNamePlaceholder: "рокрпКро░рпБро│рпН рокрпЖропро░рпН",
    categoryPlaceholder: "ро╡роХрпИ (роО.роХро╛., роЬро╛роХрпНроХрпЖроЯрпН, роЙроЯрпИ)",
    addItemBtn: "рокрпКро░рпБро│рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
    clearBtn: "родрпВроХрпНроХрпБ",
    suggestionsTitle: "роПроР роЙроЯрпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
    loadingSuggestions: "рокро░ро┐роирпНродрпБро░рпИроХро│рпН роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ройрпНро▒рой...",
    voiceBtn: "ЁЯОд роХрпБро░ро▓рпН"
  },

  ml: {
    brandName: "WardrobeIQ",
    logoutBtn: "р┤▓р╡Лр┤Чр╡Чр┤Яр╡Нр┤Яр╡Н",
    weatherLoading: "р┤╡р╡Зр┤ир╡╜р┤кр╡Нр┤кр╡Жр┤░р╡Бр┤Хр╡Нр┤Хр┤В р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
    wardrobeTitle: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤▓р┤ор┤╛р┤░р┤┐",
    loadingWardrobe: "р┤Ер┤▓р┤ор┤╛р┤░р┤┐ р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
    addTitle: "р┤кр╡Бр┤др┤┐р┤п р┤╡р┤╕р╡Нр┤др╡Б р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х",
    itemNamePlaceholder: "р┤╡р┤╕р╡Нр┤др╡Б р┤кр╡Зр┤░р╡Н",
    categoryPlaceholder: "р┤╡р┤┐р┤нр┤╛р┤Чр┤В (р┤Йр┤жр┤╛: р┤Ьр┤╛р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н, р┤╡р┤╕р╡Нр┤др╡Нр┤░р┤В)",
    addItemBtn: "р┤╡р┤╕р╡Нр┤др╡Б р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х",
    clearBtn: "р┤╡р╡Жр┤Яр╡Нр┤Яр╡Бр┤Х",
    suggestionsTitle: "р┤О.р┤Р р┤╡р┤╕р╡Нр┤др╡Нр┤░ р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛",
    loadingSuggestions: "р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛ р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
    voiceBtn: "ЁЯОд р┤╢р┤мр╡Нр┤жр┤В"
  },

  zh: {
    brandName: "WardrobeIQ",
    logoutBtn: "чЩ╗хЗ║",
    weatherLoading: "цнгхЬихКаш╜╜хдйц░Ф...",
    wardrobeTitle: "цВичЪДшбгцй▒",
    loadingWardrobe: "цнгхЬихКаш╜╜шбгцй▒...",
    addTitle: "ц╖╗хКацЦ░чЙйхУБ",
    itemNamePlaceholder: "чЙйхУБхРНчз░",
    categoryPlaceholder: "ч▒╗хИля╝Иф╛ЛхжВхд╣хЕЛя╝Мш┐ЮшбгшгЩя╝Й",
    addItemBtn: "ц╖╗хКачЙйхУБ",
    clearBtn: "ц╕ЕщЩд",
    suggestionsTitle: "AI чй┐цРнх╗║шоо",
    loadingSuggestions: "цнгхЬихКаш╜╜х╗║шоо...",
    voiceBtn: "ЁЯОд шпнщЯ│"
  },

  ar: {
    brandName: "WardrobeIQ",
    logoutBtn: "╪к╪│╪м┘К┘Д ╪о╪▒┘И╪м",
    weatherLoading: "╪м╪з╪▒┘Н ╪к╪н┘Е┘К┘Д ╪з┘Д╪╖┘В╪│...",
    wardrobeTitle: "╪о╪▓╪з┘Ж╪к┘Г",
    loadingWardrobe: "╪м╪з╪▒┘Н ╪к╪н┘Е┘К┘Д ╪з┘Д╪о╪▓╪з┘Ж╪й...",
    addTitle: "╪е╪╢╪з┘Б╪й ╪╣┘Ж╪╡╪▒ ╪м╪п┘К╪п",
    itemNamePlaceholder: "╪з╪│┘Е ╪з┘Д╪╣┘Ж╪╡╪▒",
    categoryPlaceholder: "╪з┘Д┘Б╪ж╪й (┘Е╪л╪з┘Д: ╪м╪з┘Г┘К╪к╪М ┘Б╪│╪к╪з┘Ж)",
    addItemBtn: "╪г╪╢┘Б ╪╣┘Ж╪╡╪▒┘Л╪з",
    clearBtn: "┘Е╪│╪н",
    suggestionsTitle: "╪з┘В╪к╪▒╪з╪н╪з╪к ╪з┘Д┘Е┘Д╪з╪и╪│ ╪з┘Д╪░┘Г┘К╪й",
    loadingSuggestions: "╪м╪з╪▒┘Н ╪к╪н┘Е┘К┘Д ╪з┘Д╪з┘В╪к╪▒╪з╪н╪з╪к...",
    voiceBtn: "ЁЯОд ╪з┘Д╪╡┘И╪к"
  },

  ru: {
    brandName: "WardrobeIQ",
    logoutBtn: "╨Т╤Л╨╣╤В╨╕",
    weatherLoading: "╨Ч╨░╨│╤А╤Г╨╖╨║╨░ ╨┐╨╛╨│╨╛╨┤╤Л...",
    wardrobeTitle: "╨Т╨░╤И ╨│╨░╤А╨┤╨╡╤А╨╛╨▒",
    loadingWardrobe: "╨Ч╨░╨│╤А╤Г╨╖╨║╨░ ╨│╨░╤А╨┤╨╡╤А╨╛╨▒╨░...",
    addTitle: "╨Ф╨╛╨▒╨░╨▓╨╕╤В╤М ╨╜╨╛╨▓╤Л╨╣ ╨┐╤А╨╡╨┤╨╝╨╡╤В",
    itemNamePlaceholder: "╨Э╨░╨╖╨▓╨░╨╜╨╕╨╡ ╨┐╤А╨╡╨┤╨╝╨╡╤В╨░",
    categoryPlaceholder: "╨Ъ╨░╤В╨╡╨│╨╛╤А╨╕╤П (╨╜╨░╨┐╤А╨╕╨╝╨╡╤А, ╨║╤Г╤А╤В╨║╨░, ╨┐╨╗╨░╤В╤М╨╡)",
    addItemBtn: "╨Ф╨╛╨▒╨░╨▓╨╕╤В╤М ╨┐╤А╨╡╨┤╨╝╨╡╤В",
    clearBtn: "╨Ю╤З╨╕╤Б╤В╨╕╤В╤М",
    suggestionsTitle: "╨а╨╡╨║╨╛╨╝╨╡╨╜╨┤╨░╤Ж╨╕╨╕ ╨┐╨╛ ╨╛╨┤╨╡╨╢╨┤╨╡ AI",
    loadingSuggestions: "╨Ч╨░╨│╤А╤Г╨╖╨║╨░ ╤А╨╡╨║╨╛╨╝╨╡╨╜╨┤╨░╤Ж╨╕╨╣...",
    voiceBtn: "ЁЯОд ╨У╨╛╨╗╨╛╤Б"
  },

  // add other languages you want here ...
   pt: {
    brandName: "WardrobeIQ",
    logoutBtn: "Sair",
    weatherLoading: "Carregando clima...",
    wardrobeTitle: "Seu Guarda-roupa",
    loadingWardrobe: "Carregando guarda-roupa...",
    addTitle: "Adicionar Novo Item",
    itemNamePlaceholder: "Nome do item",
    categoryPlaceholder: "Categoria (ex: jaqueta, vestido)",
    addItemBtn: "Adicionar Item",
    clearBtn: "Limpar",
    suggestionsTitle: "Sugest├╡es de Roupas AI",
    loadingSuggestions: "Carregando sugest├╡es...",
    voiceBtn: "ЁЯОд Voz"
  },

  bn: {
    brandName: "WardrobeIQ",
    logoutBtn: "рж▓ржЧ ржЖржЙржЯ",
    weatherLoading: "ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...",
    wardrobeTitle: "ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж░рзНржбрж░рзЛржм",
    loadingWardrobe: "ржУржпрж╝рж╛рж░рзНржбрж░рзЛржм рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...",
    addTitle: "ржирждрзБржи ржЖржЗржЯрзЗржо ржпрзЛржЧ ржХрж░рзБржи",
    itemNamePlaceholder: "ржЖржЗржЯрзЗржорзЗрж░ ржирж╛ржо",
    categoryPlaceholder: "рж╢рзНрж░рзЗржгрзА (ржпрзЗржоржи, ржЬрзНржпрж╛ржХрзЗржЯ, ржкрзЛрж╢рж╛ржХ)",
    addItemBtn: "ржЖржЗржЯрзЗржо ржпрзЛржЧ ржХрж░рзБржи",
    clearBtn: "ржорзБржЫрзЗ ржлрзЗрж▓рзБржи",
    suggestionsTitle: "ржПржЖржЗ ржЖржЙржЯржлрж┐ржЯ ржкрзНрж░рж╕рзНрждрж╛ржмржирж╛",
    loadingSuggestions: "ржкрзНрж░рж╕рзНрждрж╛ржмржирж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...",
    voiceBtn: "ЁЯОд ржнрзЯрзЗрж╕"
  },

  ja: {
    brandName: "WardrobeIQ",
    logoutBtn: "уГнуВ░уВвуВжуГИ",
    weatherLoading: "хдйц░ЧуВТшкнуБ┐ш╛╝уБ┐ф╕н...",
    wardrobeTitle: "уБВуБкуБЯуБоуГпуГ╝уГЙуГнуГ╝уГЦ",
    loadingWardrobe: "уГпуГ╝уГЙуГнуГ╝уГЦуВТшкнуБ┐ш╛╝уБ┐ф╕н...",
    addTitle: "цЦ░уБЧуБДуВвуВдуГЖуГауВТш┐╜хКа",
    itemNamePlaceholder: "уВвуВдуГЖуГахРН",
    categoryPlaceholder: "уВлуГЖуВ┤уГкуГ╝я╝Иф╛Ля╝ЪуВ╕уГгуВ▒уГГуГИуАБуГЙуГмуВ╣я╝Й",
    addItemBtn: "уВвуВдуГЖуГауВТш┐╜хКа",
    clearBtn: "уВпуГкуВв",
    suggestionsTitle: "AIуБоуВ│уГ╝уГЗуВгуГНуГ╝уГИцПРцбИ",
    loadingSuggestions: "цПРцбИуВТшкнуБ┐ш╛╝уБ┐ф╕н...",
    voiceBtn: "ЁЯОд щЯ│хг░"
  },

  ko: {
    brandName: "WardrobeIQ",
    logoutBtn: "ыбЬъ╖╕ьХДьЫГ",
    weatherLoading: "ыВаьФи ыбЬыФй ьдС...",
    wardrobeTitle: "ыЛ╣ьЛаьЭШ ьШ╖ьЮе",
    loadingWardrobe: "ьШ╖ьЮе ыбЬыФй ьдС...",
    addTitle: "ьГИ ьХДьЭ┤эЕЬ ь╢Фъ░А",
    itemNamePlaceholder: "ьХДьЭ┤эЕЬ ьЭ┤ыжД",
    categoryPlaceholder: "ь╣┤эЕМъ│аыжм (ьШИ: ьЮмэВ╖, ыУЬыаИьКд)",
    addItemBtn: "ьХДьЭ┤эЕЬ ь╢Фъ░А",
    clearBtn: "ь┤Иъ╕░эЩФ",
    suggestionsTitle: "AI ьЭШьГБ ь╢Фь▓Ь",
    loadingSuggestions: "ь╢Фь▓Ь ыбЬыФй ьдС...",
    voiceBtn: "ЁЯОд ьЭМьД▒"
  },

  it: {
    brandName: "WardrobeIQ",
    logoutBtn: "Disconnetti",
    weatherLoading: "Caricamento meteo...",
    wardrobeTitle: "Il tuo guardaroba",
    loadingWardrobe: "Caricamento guardaroba...",
    addTitle: "Aggiungi nuovo articolo",
    itemNamePlaceholder: "Nome articolo",
    categoryPlaceholder: "Categoria (es. giacca, vestito)",
    addItemBtn: "Aggiungi articolo",
    clearBtn: "Pulisci",
    suggestionsTitle: "Suggerimenti outfit AI",
    loadingSuggestions: "Caricamento suggerimenti...",
    voiceBtn: "ЁЯОд Voce"
  },

  tr: {
    brandName: "WardrobeIQ",
    logoutBtn: "├З─▒k─▒┼Я",
    weatherLoading: "Hava durumu y├╝kleniyor...",
    wardrobeTitle: "Gard─▒robunuz",
    loadingWardrobe: "Gard─▒rop y├╝kleniyor...",
    addTitle: "Yeni ├╢─Яe ekle",
    itemNamePlaceholder: "├Ц─Яe ad─▒",
    categoryPlaceholder: "Kategori (├╢r. ceket, elbise)",
    addItemBtn: "├Ц─Яe ekle",
    clearBtn: "Temizle",
    suggestionsTitle: "Yapay Zeka K─▒yafet ├Цnerileri",
    loadingSuggestions: "├Цneriler y├╝kleniyor...",
    voiceBtn: "ЁЯОд Ses"
  },

  vi: {
    brandName: "WardrobeIQ",
    logoutBtn: "─Р─Гng xuс║еt",
    weatherLoading: "─Рang tс║гi thс╗Эi tiс║┐t...",
    wardrobeTitle: "Tс╗з quс║зn ├бo cс╗зa bс║бn",
    loadingWardrobe: "─Рang tс║гi tс╗з quс║зn ├бo...",
    addTitle: "Th├кm mс╗еc mс╗Ыi",
    itemNamePlaceholder: "T├кn mс╗еc",
    categoryPlaceholder: "Thс╗Г loс║бi (v├н dс╗е: ├бo kho├бc, v├бy)",
    addItemBtn: "Th├кm mс╗еc",
    clearBtn: "X├│a",
    suggestionsTitle: "Gс╗гi ├╜ trang phс╗еc AI",
    loadingSuggestions: "─Рang tс║гi gс╗гi ├╜...",
    voiceBtn: "ЁЯОд Giс╗Нng n├│i"
  },

  nl: {
    brandName: "WardrobeIQ",
    logoutBtn: "Uitloggen",
    weatherLoading: "Weer wordt geladen...",
    wardrobeTitle: "Je kledingkast",
    loadingWardrobe: "Kledingkast laden...",
    addTitle: "Nieuw item toevoegen",
    itemNamePlaceholder: "Itemnaam",
    categoryPlaceholder: "Categorie (bijv. jas, jurk)",
    addItemBtn: "Item toevoegen",
    clearBtn: "Wissen",
    suggestionsTitle: "AI Outfit Suggesties",
    loadingSuggestions: "Suggesties laden...",
    voiceBtn: "ЁЯОд Stem"
  },

  pl: {
    brandName: "WardrobeIQ",
    logoutBtn: "Wyloguj si─Щ",
    weatherLoading: "┼Бadowanie pogody...",
    wardrobeTitle: "Twoja garderoba",
    loadingWardrobe: "┼Бadowanie garderoby...",
    addTitle: "Dodaj nowy element",
    itemNamePlaceholder: "Nazwa przedmiotu",
    categoryPlaceholder: "Kategoria (np. kurtka, sukienka)",
    addItemBtn: "Dodaj element",
    clearBtn: "Wyczy┼Ы─З",
    suggestionsTitle: "Sugestie stroj├│w AI",
    loadingSuggestions: "┼Бadowanie sugestii...",
    voiceBtn: "ЁЯОд G┼Вos"
  },

  sv: {
    brandName: "WardrobeIQ",
    logoutBtn: "Logga ut",
    weatherLoading: "Laddar v├дder...",
    wardrobeTitle: "Din garderob",
    loadingWardrobe: "Laddar garderob...",
    addTitle: "L├дgg till nytt f├╢rem├еl",
    itemNamePlaceholder: "F├╢rem├еlsnamn",
    categoryPlaceholder: "Kategori (t.ex. jacka, kl├дnning)",
    addItemBtn: "L├дgg till f├╢rem├еl",
    clearBtn: "Rensa",
    suggestionsTitle: "AI Outfit F├╢rslag",
    loadingSuggestions: "Laddar f├╢rslag...",
    voiceBtn: "ЁЯОд R├╢st"
  },

  no: {
    brandName: "WardrobeIQ",
    logoutBtn: "Logg ut",
    weatherLoading: "Laster v├жr...",
    wardrobeTitle: "Din garderobe",
    loadingWardrobe: "Laster garderobe...",
    addTitle: "Legg til nytt element",
    itemNamePlaceholder: "Elementnavn",
    categoryPlaceholder: "Kategori (f.eks. jakke, kjole)",
    addItemBtn: "Legg til element",
    clearBtn: "T├╕m",
    suggestionsTitle: "AI antrekksforslag",
    loadingSuggestions: "Laster forslag...",
    voiceBtn: "ЁЯОд Stemme"
  },
da: {
  brandName: "WardrobeIQ",
  logoutBtn: "Log ud",
  weatherLoading: "Indl├жser vejr...",
  wardrobeTitle: "Din garderobe",
  loadingWardrobe: "Indl├жser garderobe...",
  addTitle: "Tilf├╕j nyt element",
  itemNamePlaceholder: "Elementnavn",
  categoryPlaceholder: "Kategori (f.eks. jakke, kjole)",
  addItemBtn: "Tilf├╕j element",
  clearBtn: "Ryd",
  suggestionsTitle: "AI Outfit Forslag",
  loadingSuggestions: "Indl├жser forslag...",
  voiceBtn: "ЁЯОд Stem"
}

};



  function applyUILanguage(code) {
  const t = UI[code] || UI.en;
  
  // Text content
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.getAttribute('data-i18n');
    if (t[key]) el.textContent = t[key];
  });

  // Placeholders
  document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
    const key = el.getAttribute('data-i18n-placeholder');
    if (t[key]) el.placeholder = t[key];
  });
}
languageSwitcher.addEventListener('change', (e) => {
  applyUILanguage(e.target.value);
});

applyUILanguage('en'); // default on page load
  

  

  // Load wardrobe items (GET /api/wardrobe)
 async function loadWardrobe() {
  wardrobeItemsDiv.textContent = "Loading...";
  try {
    const res = await authFetch('/api/wardrobe');
    const items = await res.json();
    if (!Array.isArray(items) || items.length === 0) wardrobeItemsDiv.innerHTML = '<em>No items yet</em>';
    else wardrobeItemsDiv.innerHTML = items.map(renderCard).join('');
  } catch (err) {
    wardrobeItemsDiv.textContent = "Error loading wardrobe";
    console.error(err);
  }
}



  function renderCard(it) {
    const last = it.lastWornDate ? new Date(it.lastWornDate).toLocaleDateString() : 'Never';
    return `
      <div class="item-card">
        ${it.imageUrl ? `<img src="${it.imageUrl}" alt="${escapeHtml(it.itemName || it.name || '')}" style="width:100%;height:140px;object-fit:cover;border-radius:8px">` : ''}
        <p><strong>${escapeHtml(it.itemName || it.name)}</strong></p>
        <p>Category: ${escapeHtml(it.category)}</p>
        <p>Last Worn: ${last}</p>
        <div style="margin-top:6px">
          <button onclick="markAsWorn('${it._id}')" class="btn-ghost">Mark worn</button>
          <button onclick="deleteItem('${it._id}')" class="btn-ghost">Delete</button>
        </div>
      </div>
    `;
  }

window.markAsWorn = async (id) => {
  try {
    const res = await authFetch(`/api/wardrobe/${id}/wear`, { method: "POST" });
    if (!res.ok) throw new Error("Update failed");
    await loadWardrobe();
    await loadWeatherAndSuggestions();
    await loadOutfitHistories();
  } catch (err) {
    alert(err.message);
    console.error(err);
  }
};


async function loadOutfitHistories() {
  const historyDiv = document.getElementById("historyItems");
  historyDiv.textContent = "Loading...";

  try {
    const res = await authFetch('/api/wardrobe/api/wardrobe/outfithistories');

    // Always get text first, then try to parse JSON
    const resText = await res.text();
    let histories;

    try {
      histories = JSON.parse(resText);
    } catch (parseErr) {
      console.error("Failed to parse JSON. Response:", resText);
      historyDiv.textContent = "Error loading history (invalid server response)";
      return;
    }

    if (!Array.isArray(histories) || histories.length === 0) {
      historyDiv.innerHTML = "<em>No history yet</em>";
      return;
    }

    // Render history items safely
    historyDiv.innerHTML = histories.map(h => `
      <div class="item-card">
        ${h.itemId?.imageUrl ? `<img src="${h.itemId.imageUrl}" style="width:100%;height:100px;object-fit:cover;border-radius:20px">` : ''}
        <p><strong>${escapeHtml(h.itemId?.itemName || h.itemId?.name || '')}</strong></p>
        <p>Category: ${escapeHtml(h.itemId?.category || '')}</p>
        <p>Worn At: ${h.wornAt ? new Date(h.wornAt).toLocaleString() : 'Unknown'}</p>
      </div>
    `).join('');

  } catch (err) {
    console.error("Error fetching outfit histories:", err);
    historyDiv.textContent = "Error loading history";
  }
}

// Simple escapeHtml function to prevent XSS
function escapeHtml(str) {
  if (!str) return '';
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}




window.deleteItem = async (id) => {
  console.log('Deleting item id:', id);
  if (!confirm('Delete this item?')) return;
  try {
    const res = await authFetch(`/api/wardrobe/${id}`, { method: 'DELETE' });
    console.log('Delete response status:', res.status);
    if (!res.ok) {
      const errJson = await res.json().catch(() => ({}));
      console.error('Delete failed:', errJson);
      throw new Error(errJson.message || 'Delete failed');
    }
    alert('Deleted successfully');
    await loadWardrobe();
  } catch (err) {
    alert('Error: ' + err.message);
    console.error(err);
  }
};


  // Add item using FormData
  addItemForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const fd = new FormData(addItemForm);
  try {
    const res = await authFetch('/api/wardrobe', {
      method: 'POST',
      body: fd
    });
    const json = await res.json();
    if (!res.ok) return alert(json.message || 'Upload failed');
    addItemForm.reset();
    await loadWardrobe();
    await loadOutfitHistories();
    await loadWeatherAndSuggestions();
  } catch (err) {
    alert('Network error');
    console.error(err);
  }
});

document.getElementById('applyFiltersBtn').addEventListener('click', () => {
  loadWeatherAndSuggestions();  // or a dedicated function to fetch suggestions using current selects
});
['locationSelect', 'occasionSelect', 'purposeSelect'].forEach(id => {
  const el = document.getElementById(id);
  if(el) el.addEventListener('change', loadWeatherAndSuggestions);
});

  // Load weather -> send weather to suggestions endpoint (POST)
  async function loadWeatherAndSuggestions() {
  weatherInfo.textContent = UI[languageSwitcher.value]?.weatherLoading || 'Loading weather...';
  if (!navigator.geolocation) { weatherInfo.textContent = 'Geolocation not supported'; return; }

  navigator.geolocation.getCurrentPosition(async pos => {
    const lat = pos.coords.latitude, lon = pos.coords.longitude;
    try {
      const weatherRes = await fetch(`/api/weather?lat=${lat}&lon=${lon}`);
      const weather = await weatherRes.json();

      const city = weather.city || 'your area';
      const description = weather.description || '';
      const temp = weather.temperature || '';
      const windSpeed = weather.windSpeed ?? '-';
      const humidity = weather.humidity ?? '-';

      weatherInfo.textContent = `${city} ┬╖ ${description} ┬╖ ${temp}┬░C`;
      weatherDetails.textContent = `Wind: ${windSpeed} m/s тАв Humidity: ${humidity}`;

      // Get user inputs for context
      const location = document.getElementById('locationSelect').value || '';
      const occasion = document.getElementById('occasionSelect').value || '';
      const purpose = document.getElementById('purposeSelect').value || '';

      // POST to suggestions with weather + context
      const sugRes = await authFetch('/api/wardrobe/suggestions', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    temp: Number(temp), 
    condition: description,
    location,
    occasion,
    purpose
  })
});


      const result = await sugRes.json();
      const items = result.suggestions || [];
      suggestionsDiv.innerHTML = items.length ? items.map(i =>
        `<div class="item-card">${i.imageUrl ? `<img src="${i.imageUrl}" style="width:100%;height:120px;object-fit:cover;border-radius:8px">` : ''}<p>${escapeHtml(i.itemName || i.name)}</p></div>`
      ).join('') : '<em>No suggestions</em>';

    } catch (err) {
      weatherInfo.textContent = 'Error loading weather';
      suggestionsDiv.textContent = '';
      console.error(err);
    }
  }, err => {
    weatherInfo.textContent = 'Location permission required';
    console.error(err);
  }, { timeout: 10000 });
}


  // Voice command: simple filter / add prefill
  voiceCommandBtn.addEventListener('click', () => {
    if (!('SpeechRecognition' in window) && !('webkitSpeechRecognition' in window)) {
      alert('Speech recognition not supported in this browser.');
      return;
    }
    const Recognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const rec = new Recognition();
    rec.lang = languageSwitcher.value || 'en-US';
    voiceStatus.textContent = 'Listening...';
    rec.onresult = async (ev) => {
      const text = ev.results[0][0].transcript.toLowerCase();
      voiceStatus.textContent = `Heard: ${text}`;
      if (text.includes('show') && text.includes('jack')) {
  // filter jackets
  const res = await authFetch('/api/wardrobe?category=jackets');
  const items = await res.json();
  wardrobeItemsDiv.innerHTML = items.map(renderCard).join('');
}
 else if (text.startsWith('add ')) {
        const name = text.replace(/^add\s+/, '').trim();
        document.getElementById('itemName').value = name;
        document.getElementById('category').focus();
      } else if (text.includes('suggest') || text.includes('outfit')) {
        await loadWeatherAndSuggestions();
      } else {
        alert('Command not recognized: ' + text);
      }
      rec.stop();
      voiceStatus.textContent = '';
    };
    rec.onerror = (e) => {
      voiceStatus.textContent = 'Voice error: ' + (e.error || 'unknown');
      console.error(e);
    };
    rec.start();
  });

  languageSwitcher.addEventListener('change', (ev) => applyUILanguage(ev.target.value));

  function escapeHtml(s){ return String(s||'').replace(/[&<>"']/g, m=> ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }

  // initial load
  loadWardrobe();
  loadWeatherAndSuggestions();
});  